//    _   _____   __________
//   | | / / _ | / __/_  __/     Visibility
//   | |/ / __ |_\ \  / /          Across
//   |___/_/ |_/___/ /_/       Space and Time
//
// SPDX-FileCopyrightText: (c) 2021 The Tenzir Contributors
// SPDX-License-Identifier: BSD-3-Clause

#include "tenzir/config.hpp"
#include "tenzir/detail/assert.hpp"

#include <array>

namespace tenzir::version {

const char* version = "@TENZIR_VERSION_FULL@";
const char* build_metadata = "@TENZIR_VERSION_BUILD_METADATA@";
const uint64_t major = @Tenzir_VERSION_MAJOR@;
const uint64_t minor = @Tenzir_VERSION_MINOR@;
const uint64_t patch = @Tenzir_VERSION_PATCH@;
const uint64_t current_partition_version = @TENZIR_PARTITION_VERSION@;

supported_versions
support_for_partition_version(uint64_t partition_version) noexcept {
  static constexpr auto table
    = std::array<supported_versions, @TENZIR_PARTITION_VERSION@ +1>{
      // Partition version 0 was introduced implicitly; it's used when no
      // partition version was specified.
      supported_versions{"VAST v1.0", "VAST v2.4"},
      // Alongside partition version 1 we introduced homogeneous partitions and
      // the rebuilder, and required table slices to be of the arrow.v2 encoding
      // in their FlatBuffers table.
      supported_versions{"VAST v2.2", "Tenzir Node v4.29"},
      // Partition version 2 was introduced along the removal of the ability to
      // write new segment stores, switching all stores to be Feather or
      // Parquet.
      supported_versions{"VAST v2.4", std::nullopt},
    };
  TENZIR_ASSERT(partition_version < table.size(),
                "unsupported partition version");
  return table[partition_version];
}

namespace build {

const char* type = "@TENZIR_BUILD_TYPE@";
const char* tree_hash = "@TENZIR_BUILD_TREE_HASH@";

#undef TENZIR_ENABLE_ASSERTIONS
#cmakedefine01 TENZIR_ENABLE_ASSERTIONS
#if TENZIR_ENABLE_ASSERTIONS
bool has_assertions = true;
#else
bool has_assertions = false;
#endif

#undef TENZIR_ENABLE_ASAN
#cmakedefine01 TENZIR_ENABLE_ASAN
#if TENZIR_ENABLE_ASAN
bool has_address_sanitizer = true;
#else
bool has_address_sanitizer = false;
#endif

#undef TENZIR_ENABLE_UBSAN
#cmakedefine01 TENZIR_ENABLE_UBSAN
#if TENZIR_ENABLE_UBSAN
bool has_undefined_behavior_sanitizer = true;
#else
bool has_undefined_behavior_sanitizer = false;
#endif

} // namespace build

} // namespace tenzir::version
